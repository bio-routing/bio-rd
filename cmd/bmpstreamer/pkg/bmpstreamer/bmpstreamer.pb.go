// Code generated by protoc-gen-go. DO NOT EDIT.
// source: apps/bmp-streamer/pkg/bmpstreamer/bmp.proto

/*
Package bmpstreamer is a generated protocol buffer package.
It is generated from these files:
	apps/bmp-streamer/pkg/bmpstreamer/bmp.proto
It has these top-level messages:
	AdjRIBInStreamRequest
	RIBUpdate
*/
package bmpstreamer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bio_net "github.com/bio-routing/bio-rd/net/api"
import bio_route "github.com/bio-routing/bio-rd/route/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AdjRIBInStreamRequest struct {
	Router *bio_net.IP `protobuf:"bytes,1,opt,name=router" json:"router,omitempty"`
}

func (m *AdjRIBInStreamRequest) Reset()                    { *m = AdjRIBInStreamRequest{} }
func (m *AdjRIBInStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*AdjRIBInStreamRequest) ProtoMessage()               {}
func (*AdjRIBInStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AdjRIBInStreamRequest) GetRouter() *bio_net.IP {
	if m != nil {
		return m.Router
	}
	return nil
}

type RIBUpdate struct {
	Peer          *bio_net.IP      `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Advertisement bool             `protobuf:"varint,2,opt,name=advertisement" json:"advertisement,omitempty"`
	Route         *bio_route.Route `protobuf:"bytes,3,opt,name=route" json:"route,omitempty"`
}

func (m *RIBUpdate) Reset()                    { *m = RIBUpdate{} }
func (m *RIBUpdate) String() string            { return proto.CompactTextString(m) }
func (*RIBUpdate) ProtoMessage()               {}
func (*RIBUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RIBUpdate) GetPeer() *bio_net.IP {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RIBUpdate) GetAdvertisement() bool {
	if m != nil {
		return m.Advertisement
	}
	return false
}

func (m *RIBUpdate) GetRoute() *bio_route.Route {
	if m != nil {
		return m.Route
	}
	return nil
}

func init() {
	proto.RegisterType((*AdjRIBInStreamRequest)(nil), "bmpstreamer.AdjRIBInStreamRequest")
	proto.RegisterType((*RIBUpdate)(nil), "bmpstreamer.RIBUpdate")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RIBService service

type RIBServiceClient interface {
	AdjRIBInStream(ctx context.Context, in *AdjRIBInStreamRequest, opts ...grpc.CallOption) (RIBService_AdjRIBInStreamClient, error)
}

type rIBServiceClient struct {
	cc *grpc.ClientConn
}

func NewRIBServiceClient(cc *grpc.ClientConn) RIBServiceClient {
	return &rIBServiceClient{cc}
}

func (c *rIBServiceClient) AdjRIBInStream(ctx context.Context, in *AdjRIBInStreamRequest, opts ...grpc.CallOption) (RIBService_AdjRIBInStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RIBService_serviceDesc.Streams[0], c.cc, "/bmpstreamer.RIBService/adjRIBInStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &rIBServiceAdjRIBInStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RIBService_AdjRIBInStreamClient interface {
	Recv() (*RIBUpdate, error)
	grpc.ClientStream
}

type rIBServiceAdjRIBInStreamClient struct {
	grpc.ClientStream
}

func (x *rIBServiceAdjRIBInStreamClient) Recv() (*RIBUpdate, error) {
	m := new(RIBUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RIBService service

type RIBServiceServer interface {
	AdjRIBInStream(*AdjRIBInStreamRequest, RIBService_AdjRIBInStreamServer) error
}

func RegisterRIBServiceServer(s *grpc.Server, srv RIBServiceServer) {
	s.RegisterService(&_RIBService_serviceDesc, srv)
}

func _RIBService_AdjRIBInStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AdjRIBInStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RIBServiceServer).AdjRIBInStream(m, &rIBServiceAdjRIBInStreamServer{stream})
}

type RIBService_AdjRIBInStreamServer interface {
	Send(*RIBUpdate) error
	grpc.ServerStream
}

type rIBServiceAdjRIBInStreamServer struct {
	grpc.ServerStream
}

func (x *rIBServiceAdjRIBInStreamServer) Send(m *RIBUpdate) error {
	return x.ServerStream.SendMsg(m)
}

var _RIBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bmpstreamer.RIBService",
	HandlerType: (*RIBServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "adjRIBInStream",
			Handler:       _RIBService_AdjRIBInStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apps/bmp-streamer/pkg/bmpstreamer/bmp.proto",
}

func init() { proto.RegisterFile("apps/bmp-streamer/pkg/bmpstreamer/bmp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x89, 0x7f, 0x8a, 0x4e, 0x50, 0x74, 0xa1, 0x12, 0x72, 0xb1, 0x44, 0x91, 0x82, 0xb8,
	0x91, 0x7a, 0xf5, 0x62, 0x6e, 0x7b, 0x11, 0xd9, 0xe2, 0xcd, 0xcb, 0xc6, 0x0c, 0x12, 0x25, 0xc9,
	0xb8, 0x99, 0xf6, 0xe0, 0xa7, 0x97, 0xcc, 0x96, 0xd2, 0x40, 0x2f, 0xcb, 0xee, 0xef, 0xbd, 0x7d,
	0xcc, 0x1b, 0xb8, 0x77, 0x44, 0x7d, 0x5e, 0x36, 0xf4, 0xd0, 0xb3, 0x47, 0xd7, 0xa0, 0xcf, 0xe9,
	0xe7, 0x6b, 0x00, 0xdb, 0x77, 0xd9, 0x90, 0x26, 0xdf, 0x71, 0xa7, 0xe2, 0x1d, 0x9c, 0x5e, 0xb6,
	0xc8, 0xb9, 0xa3, 0x3a, 0x6f, 0x91, 0x83, 0x9e, 0x4e, 0x7d, 0xb7, 0x62, 0x14, 0x28, 0xb7, 0x80,
	0xb3, 0x67, 0x98, 0xbe, 0x54, 0xdf, 0xd6, 0x14, 0xa6, 0x5d, 0xca, 0x6f, 0x8b, 0xbf, 0x2b, 0xec,
	0x59, 0xdd, 0xc0, 0x44, 0x7c, 0x3e, 0x89, 0x66, 0xd1, 0x3c, 0x5e, 0xc4, 0xba, 0xac, 0x3b, 0x3d,
	0xe4, 0x99, 0x37, 0xbb, 0x91, 0xb2, 0x3f, 0x38, 0xb5, 0xa6, 0x78, 0xa7, 0xca, 0x31, 0xaa, 0x6b,
	0x38, 0x22, 0xdc, 0xef, 0x17, 0x41, 0xdd, 0xc2, 0x99, 0xab, 0xd6, 0xe8, 0xb9, 0xee, 0xb1, 0xc1,
	0x96, 0x93, 0x83, 0x59, 0x34, 0x3f, 0xb1, 0x63, 0xa8, 0xee, 0xe0, 0x58, 0xd2, 0x93, 0x43, 0xc9,
	0xb9, 0x90, 0x9c, 0x30, 0xb2, 0x1d, 0x4e, 0x1b, 0xe4, 0xc5, 0x07, 0x80, 0x35, 0xc5, 0x12, 0xfd,
	0xba, 0xfe, 0x44, 0xf5, 0x0a, 0xe7, 0x6e, 0xd4, 0x43, 0x65, 0x7a, 0x67, 0x23, 0x7a, 0x6f, 0xc9,
	0xf4, 0x6a, 0xe4, 0xd9, 0x56, 0x79, 0x8c, 0xca, 0x89, 0xac, 0xe7, 0xe9, 0x3f, 0x00, 0x00, 0xff,
	0xff, 0xfd, 0x37, 0x1d, 0xd9, 0x84, 0x01, 0x00, 0x00,
}
