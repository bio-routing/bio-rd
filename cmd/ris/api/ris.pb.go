// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/bio-routing/bio-rd/cmd/ris/api/ris.proto

package api

import (
	context "context"
	fmt "fmt"
	api "github.com/bio-routing/bio-rd/net/api"
	api1 "github.com/bio-routing/bio-rd/route/api"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LPMRequest struct {
	Router               string      `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
	VrfId                uint64      `protobuf:"varint,2,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	Pfx                  *api.Prefix `protobuf:"bytes,3,opt,name=pfx,proto3" json:"pfx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LPMRequest) Reset()         { *m = LPMRequest{} }
func (m *LPMRequest) String() string { return proto.CompactTextString(m) }
func (*LPMRequest) ProtoMessage()    {}
func (*LPMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffe1202aa518913f, []int{0}
}

func (m *LPMRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LPMRequest.Unmarshal(m, b)
}
func (m *LPMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LPMRequest.Marshal(b, m, deterministic)
}
func (m *LPMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPMRequest.Merge(m, src)
}
func (m *LPMRequest) XXX_Size() int {
	return xxx_messageInfo_LPMRequest.Size(m)
}
func (m *LPMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LPMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LPMRequest proto.InternalMessageInfo

func (m *LPMRequest) GetRouter() string {
	if m != nil {
		return m.Router
	}
	return ""
}

func (m *LPMRequest) GetVrfId() uint64 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *LPMRequest) GetPfx() *api.Prefix {
	if m != nil {
		return m.Pfx
	}
	return nil
}

type LPMResponse struct {
	Routes               []*api1.Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LPMResponse) Reset()         { *m = LPMResponse{} }
func (m *LPMResponse) String() string { return proto.CompactTextString(m) }
func (*LPMResponse) ProtoMessage()    {}
func (*LPMResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffe1202aa518913f, []int{1}
}

func (m *LPMResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LPMResponse.Unmarshal(m, b)
}
func (m *LPMResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LPMResponse.Marshal(b, m, deterministic)
}
func (m *LPMResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPMResponse.Merge(m, src)
}
func (m *LPMResponse) XXX_Size() int {
	return xxx_messageInfo_LPMResponse.Size(m)
}
func (m *LPMResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LPMResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LPMResponse proto.InternalMessageInfo

func (m *LPMResponse) GetRoutes() []*api1.Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func init() {
	proto.RegisterType((*LPMRequest)(nil), "bio.ris.LPMRequest")
	proto.RegisterType((*LPMResponse)(nil), "bio.ris.LPMResponse")
}

func init() {
	proto.RegisterFile("github.com/bio-routing/bio-rd/cmd/ris/api/ris.proto", fileDescriptor_ffe1202aa518913f)
}

var fileDescriptor_ffe1202aa518913f = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4f, 0x84, 0x30,
	0x10, 0xc5, 0x45, 0x74, 0x8d, 0xe5, 0xa0, 0xa9, 0x7f, 0x82, 0x9c, 0x90, 0x13, 0xc6, 0x58, 0x12,
	0xf6, 0xe0, 0xdd, 0xdb, 0x26, 0xbb, 0x91, 0xd4, 0x9b, 0x07, 0xcd, 0x02, 0x65, 0x9d, 0x03, 0x2d,
	0x4e, 0x0b, 0xd9, 0x8f, 0x6f, 0xda, 0x92, 0x18, 0x2f, 0xea, 0xa5, 0x9d, 0xe9, 0xe4, 0xf5, 0xf7,
	0x66, 0x86, 0x2c, 0x77, 0x60, 0x3e, 0xc6, 0x9a, 0x35, 0xaa, 0x2f, 0x6a, 0x50, 0x0f, 0xa8, 0x46,
	0x03, 0x72, 0xe7, 0xe3, 0xb6, 0x68, 0xfa, 0xb6, 0x40, 0xd0, 0xc5, 0x76, 0x00, 0x7b, 0xb3, 0x01,
	0x95, 0x51, 0xf4, 0xa4, 0x06, 0xc5, 0x10, 0x74, 0x52, 0xfc, 0xae, 0x96, 0xc2, 0x38, 0xa5, 0x14,
	0xc6, 0x2b, 0x93, 0x3f, 0x70, 0x36, 0x15, 0x1e, 0x66, 0x23, 0x2f, 0xca, 0xde, 0x08, 0x59, 0x57,
	0x1b, 0x2e, 0x3e, 0x47, 0xa1, 0x0d, 0xbd, 0x26, 0x0b, 0x57, 0xc4, 0x38, 0x48, 0x83, 0xfc, 0x94,
	0xcf, 0x19, 0xbd, 0x22, 0x8b, 0x09, 0xbb, 0x77, 0x68, 0xe3, 0xc3, 0x34, 0xc8, 0x8f, 0xf8, 0xf1,
	0x84, 0xdd, 0xaa, 0xa5, 0xb7, 0x24, 0x1c, 0xba, 0x7d, 0x1c, 0xa6, 0x41, 0x1e, 0x95, 0x67, 0xcc,
	0x3a, 0xb7, 0x76, 0x2a, 0x14, 0x1d, 0xec, 0xb9, 0xad, 0x65, 0x8f, 0x24, 0x72, 0xff, 0xeb, 0x41,
	0x49, 0x2d, 0x68, 0x3e, 0x03, 0x74, 0x1c, 0xa4, 0x61, 0x1e, 0x95, 0xe7, 0x4e, 0xe4, 0x0d, 0x71,
	0x7b, 0xce, 0x48, 0x5d, 0x3e, 0x93, 0x1b, 0xee, 0x1b, 0x58, 0xc9, 0x4e, 0x61, 0xbf, 0x35, 0xa0,
	0xe4, 0x8b, 0xc0, 0x09, 0x1a, 0x41, 0x4b, 0x12, 0xae, 0xab, 0x0d, 0xbd, 0x60, 0xf3, 0xb0, 0xd8,
	0x77, 0x0f, 0xc9, 0xe5, 0xcf, 0x47, 0x0f, 0xce, 0x0e, 0x9e, 0xee, 0x5f, 0xef, 0xfe, 0xbd, 0x8f,
	0x7a, 0xe1, 0xa6, 0xb3, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xe2, 0x24, 0x19, 0xc3, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoutingInformationServiceClient is the client API for RoutingInformationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoutingInformationServiceClient interface {
	LPM(ctx context.Context, in *LPMRequest, opts ...grpc.CallOption) (*LPMResponse, error)
}

type routingInformationServiceClient struct {
	cc *grpc.ClientConn
}

func NewRoutingInformationServiceClient(cc *grpc.ClientConn) RoutingInformationServiceClient {
	return &routingInformationServiceClient{cc}
}

func (c *routingInformationServiceClient) LPM(ctx context.Context, in *LPMRequest, opts ...grpc.CallOption) (*LPMResponse, error) {
	out := new(LPMResponse)
	err := c.cc.Invoke(ctx, "/bio.ris.RoutingInformationService/LPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingInformationServiceServer is the server API for RoutingInformationService service.
type RoutingInformationServiceServer interface {
	LPM(context.Context, *LPMRequest) (*LPMResponse, error)
}

func RegisterRoutingInformationServiceServer(s *grpc.Server, srv RoutingInformationServiceServer) {
	s.RegisterService(&_RoutingInformationService_serviceDesc, srv)
}

func _RoutingInformationService_LPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingInformationServiceServer).LPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bio.ris.RoutingInformationService/LPM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingInformationServiceServer).LPM(ctx, req.(*LPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoutingInformationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bio.ris.RoutingInformationService",
	HandlerType: (*RoutingInformationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LPM",
			Handler:    _RoutingInformationService_LPM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/bio-routing/bio-rd/cmd/ris/api/ris.proto",
}
