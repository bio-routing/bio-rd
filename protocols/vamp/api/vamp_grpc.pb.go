// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VAMPServiceClient is the client API for VAMPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VAMPServiceClient interface {
	RunSession(ctx context.Context, in *VAMPSessionRequest, opts ...grpc.CallOption) (VAMPService_RunSessionClient, error)
}

type vAMPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVAMPServiceClient(cc grpc.ClientConnInterface) VAMPServiceClient {
	return &vAMPServiceClient{cc}
}

func (c *vAMPServiceClient) RunSession(ctx context.Context, in *VAMPSessionRequest, opts ...grpc.CallOption) (VAMPService_RunSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &VAMPService_ServiceDesc.Streams[0], "/bio.vamp.VAMPService/RunSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &vAMPServiceRunSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VAMPService_RunSessionClient interface {
	Recv() (*VAMPMessage, error)
	grpc.ClientStream
}

type vAMPServiceRunSessionClient struct {
	grpc.ClientStream
}

func (x *vAMPServiceRunSessionClient) Recv() (*VAMPMessage, error) {
	m := new(VAMPMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VAMPServiceServer is the server API for VAMPService service.
// All implementations must embed UnimplementedVAMPServiceServer
// for forward compatibility
type VAMPServiceServer interface {
	RunSession(*VAMPSessionRequest, VAMPService_RunSessionServer) error
	mustEmbedUnimplementedVAMPServiceServer()
}

// UnimplementedVAMPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVAMPServiceServer struct {
}

func (UnimplementedVAMPServiceServer) RunSession(*VAMPSessionRequest, VAMPService_RunSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method RunSession not implemented")
}
func (UnimplementedVAMPServiceServer) mustEmbedUnimplementedVAMPServiceServer() {}

// UnsafeVAMPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VAMPServiceServer will
// result in compilation errors.
type UnsafeVAMPServiceServer interface {
	mustEmbedUnimplementedVAMPServiceServer()
}

func RegisterVAMPServiceServer(s grpc.ServiceRegistrar, srv VAMPServiceServer) {
	s.RegisterService(&VAMPService_ServiceDesc, srv)
}

func _VAMPService_RunSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VAMPSessionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VAMPServiceServer).RunSession(m, &vAMPServiceRunSessionServer{stream})
}

type VAMPService_RunSessionServer interface {
	Send(*VAMPMessage) error
	grpc.ServerStream
}

type vAMPServiceRunSessionServer struct {
	grpc.ServerStream
}

func (x *vAMPServiceRunSessionServer) Send(m *VAMPMessage) error {
	return x.ServerStream.SendMsg(m)
}

// VAMPService_ServiceDesc is the grpc.ServiceDesc for VAMPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VAMPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bio.vamp.VAMPService",
	HandlerType: (*VAMPServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunSession",
			Handler:       _VAMPService_RunSession_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocols/vamp/api/vamp.proto",
}
