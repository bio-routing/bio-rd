// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/bio-routing/bio-rd/protocols/bgp/api/bgp.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	github.com/bio-routing/bio-rd/protocols/bgp/api/bgp.proto
	github.com/bio-routing/bio-rd/protocols/bgp/api/session.proto

It has these top-level messages:
	ListSessionsRequest
	SessionFilter
	ListSessionsResponse
	DumpRIBRequest
	DumpRIBResponse
	Session
	SessionStats
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bio_net "github.com/bio-routing/bio-rd/net/api"
import bio_route "github.com/bio-routing/bio-rd/route/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListSessionsRequest struct {
	Filter *SessionFilter `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
}

func (m *ListSessionsRequest) Reset()                    { *m = ListSessionsRequest{} }
func (m *ListSessionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSessionsRequest) ProtoMessage()               {}
func (*ListSessionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ListSessionsRequest) GetFilter() *SessionFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type SessionFilter struct {
	NeighborIp *bio_net.IP `protobuf:"bytes,1,opt,name=neighbor_ip,json=neighborIp" json:"neighbor_ip,omitempty"`
	VrfName    string      `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
}

func (m *SessionFilter) Reset()                    { *m = SessionFilter{} }
func (m *SessionFilter) String() string            { return proto.CompactTextString(m) }
func (*SessionFilter) ProtoMessage()               {}
func (*SessionFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SessionFilter) GetNeighborIp() *bio_net.IP {
	if m != nil {
		return m.NeighborIp
	}
	return nil
}

func (m *SessionFilter) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type ListSessionsResponse struct {
	Sessions []*Session `protobuf:"bytes,1,rep,name=sessions" json:"sessions,omitempty"`
}

func (m *ListSessionsResponse) Reset()                    { *m = ListSessionsResponse{} }
func (m *ListSessionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSessionsResponse) ProtoMessage()               {}
func (*ListSessionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListSessionsResponse) GetSessions() []*Session {
	if m != nil {
		return m.Sessions
	}
	return nil
}

type DumpRIBRequest struct {
	Peer *bio_net.IP `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Afi  uint32      `protobuf:"varint,2,opt,name=afi" json:"afi,omitempty"`
	Safi uint32      `protobuf:"varint,3,opt,name=safi" json:"safi,omitempty"`
}

func (m *DumpRIBRequest) Reset()                    { *m = DumpRIBRequest{} }
func (m *DumpRIBRequest) String() string            { return proto.CompactTextString(m) }
func (*DumpRIBRequest) ProtoMessage()               {}
func (*DumpRIBRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DumpRIBRequest) GetPeer() *bio_net.IP {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *DumpRIBRequest) GetAfi() uint32 {
	if m != nil {
		return m.Afi
	}
	return 0
}

func (m *DumpRIBRequest) GetSafi() uint32 {
	if m != nil {
		return m.Safi
	}
	return 0
}

type DumpRIBResponse struct {
	Routes []*bio_route.Route `protobuf:"bytes,1,rep,name=routes" json:"routes,omitempty"`
}

func (m *DumpRIBResponse) Reset()                    { *m = DumpRIBResponse{} }
func (m *DumpRIBResponse) String() string            { return proto.CompactTextString(m) }
func (*DumpRIBResponse) ProtoMessage()               {}
func (*DumpRIBResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DumpRIBResponse) GetRoutes() []*bio_route.Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func init() {
	proto.RegisterType((*ListSessionsRequest)(nil), "bio.bgp.ListSessionsRequest")
	proto.RegisterType((*SessionFilter)(nil), "bio.bgp.SessionFilter")
	proto.RegisterType((*ListSessionsResponse)(nil), "bio.bgp.ListSessionsResponse")
	proto.RegisterType((*DumpRIBRequest)(nil), "bio.bgp.DumpRIBRequest")
	proto.RegisterType((*DumpRIBResponse)(nil), "bio.bgp.DumpRIBResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BgpService service

type BgpServiceClient interface {
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	DumpRIBIn(ctx context.Context, in *DumpRIBRequest, opts ...grpc.CallOption) (*DumpRIBResponse, error)
	DumpRIBOut(ctx context.Context, in *DumpRIBRequest, opts ...grpc.CallOption) (*DumpRIBResponse, error)
}

type bgpServiceClient struct {
	cc *grpc.ClientConn
}

func NewBgpServiceClient(cc *grpc.ClientConn) BgpServiceClient {
	return &bgpServiceClient{cc}
}

func (c *bgpServiceClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	out := new(ListSessionsResponse)
	err := grpc.Invoke(ctx, "/bio.bgp.BgpService/ListSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpServiceClient) DumpRIBIn(ctx context.Context, in *DumpRIBRequest, opts ...grpc.CallOption) (*DumpRIBResponse, error) {
	out := new(DumpRIBResponse)
	err := grpc.Invoke(ctx, "/bio.bgp.BgpService/DumpRIBIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpServiceClient) DumpRIBOut(ctx context.Context, in *DumpRIBRequest, opts ...grpc.CallOption) (*DumpRIBResponse, error) {
	out := new(DumpRIBResponse)
	err := grpc.Invoke(ctx, "/bio.bgp.BgpService/DumpRIBOut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BgpService service

type BgpServiceServer interface {
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	DumpRIBIn(context.Context, *DumpRIBRequest) (*DumpRIBResponse, error)
	DumpRIBOut(context.Context, *DumpRIBRequest) (*DumpRIBResponse, error)
}

func RegisterBgpServiceServer(s *grpc.Server, srv BgpServiceServer) {
	s.RegisterService(&_BgpService_serviceDesc, srv)
}

func _BgpService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bio.bgp.BgpService/ListSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpServiceServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpService_DumpRIBIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpRIBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpServiceServer).DumpRIBIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bio.bgp.BgpService/DumpRIBIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpServiceServer).DumpRIBIn(ctx, req.(*DumpRIBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpService_DumpRIBOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpRIBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpServiceServer).DumpRIBOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bio.bgp.BgpService/DumpRIBOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpServiceServer).DumpRIBOut(ctx, req.(*DumpRIBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BgpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bio.bgp.BgpService",
	HandlerType: (*BgpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSessions",
			Handler:    _BgpService_ListSessions_Handler,
		},
		{
			MethodName: "DumpRIBIn",
			Handler:    _BgpService_DumpRIBIn_Handler,
		},
		{
			MethodName: "DumpRIBOut",
			Handler:    _BgpService_DumpRIBOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/bio-routing/bio-rd/protocols/bgp/api/bgp.proto",
}

func init() {
	proto.RegisterFile("github.com/bio-routing/bio-rd/protocols/bgp/api/bgp.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x35, 0xb6, 0xf4, 0xe3, 0xc6, 0x6a, 0x19, 0x45, 0x63, 0x50, 0x2c, 0x79, 0xca, 0x43, 0x4d,
	0xb0, 0x7d, 0x12, 0x11, 0xb4, 0x54, 0x21, 0xe0, 0x17, 0xd3, 0x07, 0x97, 0x7d, 0x29, 0x49, 0x77,
	0x92, 0x0e, 0x34, 0x33, 0xb3, 0x99, 0x49, 0x7f, 0xef, 0xfe, 0x94, 0x25, 0x93, 0x69, 0xd8, 0xec,
	0x47, 0xa1, 0xfb, 0xd2, 0xde, 0x9c, 0x73, 0xcf, 0xe1, 0x9c, 0xdc, 0xc0, 0xe7, 0x8c, 0xaa, 0x6d,
	0x99, 0x04, 0x1b, 0x9e, 0x87, 0x09, 0xe5, 0x1f, 0x0b, 0x5e, 0x2a, 0xca, 0xb2, 0x7a, 0xbe, 0x08,
	0x45, 0xc1, 0x15, 0xdf, 0xf0, 0x9d, 0x0c, 0x93, 0x4c, 0x84, 0xb1, 0xa0, 0xd5, 0x7f, 0xa0, 0x51,
	0xd4, 0x4f, 0x28, 0x0f, 0x92, 0x4c, 0xb8, 0xe1, 0x71, 0x0f, 0x46, 0x94, 0x56, 0x32, 0xa2, 0x6a,
	0xa5, 0x3b, 0x3f, 0x2e, 0xa8, 0x1e, 0x89, 0x96, 0xe8, 0xc9, 0x88, 0xbe, 0x9e, 0x9a, 0x54, 0x12,
	0x29, 0x29, 0x67, 0xb5, 0xdc, 0xfb, 0x01, 0x2f, 0x7f, 0x51, 0xa9, 0x56, 0x35, 0x28, 0x31, 0xb9,
	0x2c, 0x89, 0x54, 0x28, 0x80, 0x5e, 0x4a, 0x77, 0x8a, 0x14, 0x8e, 0x35, 0xb1, 0x7c, 0x7b, 0xf6,
	0x3a, 0x30, 0xad, 0x02, 0xb3, 0xf9, 0x53, 0xb3, 0xd8, 0x6c, 0x79, 0x67, 0x30, 0x6a, 0x11, 0x68,
	0x0a, 0x36, 0x23, 0x34, 0xdb, 0x26, 0xbc, 0x58, 0x53, 0x61, 0x5c, 0x6c, 0xed, 0x52, 0x15, 0x8e,
	0xfe, 0x61, 0x38, 0xf0, 0x91, 0x40, 0x6f, 0x61, 0xb0, 0x2f, 0xd2, 0x35, 0x8b, 0x73, 0xe2, 0x3c,
	0x9d, 0x58, 0xfe, 0x10, 0xf7, 0xf7, 0x45, 0xfa, 0x27, 0xce, 0x89, 0xb7, 0x84, 0x57, 0xed, 0x80,
	0x52, 0x70, 0x26, 0x09, 0x9a, 0xc2, 0xc0, 0x34, 0x91, 0x8e, 0x35, 0xe9, 0xf8, 0xf6, 0x6c, 0x7c,
	0x3b, 0x23, 0x6e, 0x36, 0xbc, 0xff, 0xf0, 0x7c, 0x59, 0xe6, 0x02, 0x47, 0x8b, 0x43, 0xc3, 0x0f,
	0xd0, 0x15, 0xa4, 0xe9, 0xd7, 0x4a, 0xa6, 0x09, 0x34, 0x86, 0x4e, 0x9c, 0x52, 0x1d, 0x67, 0x84,
	0xab, 0x11, 0x21, 0xe8, 0xca, 0x0a, 0xea, 0x68, 0x48, 0xcf, 0xde, 0x17, 0x78, 0xd1, 0x18, 0x9b,
	0x64, 0x3e, 0xf4, 0xf4, 0x81, 0xda, 0xb9, 0xea, 0x9b, 0xe1, 0xea, 0x17, 0x1b, 0x7e, 0x76, 0x65,
	0x01, 0x2c, 0x32, 0xb1, 0x22, 0xc5, 0x9e, 0x6e, 0x08, 0xfa, 0x0d, 0xcf, 0x6e, 0x56, 0x45, 0xef,
	0x9a, 0x42, 0xf7, 0x9c, 0xc8, 0x7d, 0xff, 0x00, 0x5b, 0xa7, 0xf0, 0x9e, 0xa0, 0x6f, 0x30, 0x34,
	0xd1, 0x22, 0x86, 0xde, 0x34, 0xdb, 0xed, 0xf7, 0xe0, 0x3a, 0x77, 0x89, 0xc6, 0xe1, 0x3b, 0x80,
	0x01, 0xff, 0x96, 0xea, 0x51, 0x16, 0x8b, 0x4f, 0xe7, 0xe1, 0x89, 0x1f, 0x68, 0xd2, 0xd3, 0xd0,
	0xfc, 0x3a, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x8d, 0xa9, 0x38, 0x84, 0x03, 0x00, 0x00,
}
