// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: github.com/bio-routing/bio-rd/protocols/bgp/api/bgp.proto

package api

import (
	context "context"
	api "github.com/bio-routing/bio-rd/net/api"
	api1 "github.com/bio-routing/bio-rd/route/api"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *SessionFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListSessionsRequest) Reset() {
	*x = ListSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsRequest) ProtoMessage() {}

func (x *ListSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsRequest.ProtoReflect.Descriptor instead.
func (*ListSessionsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDescGZIP(), []int{0}
}

func (x *ListSessionsRequest) GetFilter() *SessionFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SessionFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborIp *api.IP `protobuf:"bytes,1,opt,name=neighbor_ip,json=neighborIp,proto3" json:"neighbor_ip,omitempty"`
	VrfName    string  `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *SessionFilter) Reset() {
	*x = SessionFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionFilter) ProtoMessage() {}

func (x *SessionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionFilter.ProtoReflect.Descriptor instead.
func (*SessionFilter) Descriptor() ([]byte, []int) {
	return file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDescGZIP(), []int{1}
}

func (x *SessionFilter) GetNeighborIp() *api.IP {
	if x != nil {
		return x.NeighborIp
	}
	return nil
}

func (x *SessionFilter) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

type ListSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*Session `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *ListSessionsResponse) Reset() {
	*x = ListSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsResponse) ProtoMessage() {}

func (x *ListSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsResponse.ProtoReflect.Descriptor instead.
func (*ListSessionsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDescGZIP(), []int{2}
}

func (x *ListSessionsResponse) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type DumpRIBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer *api.IP `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Afi  uint32  `protobuf:"varint,2,opt,name=afi,proto3" json:"afi,omitempty"`
	Safi uint32  `protobuf:"varint,3,opt,name=safi,proto3" json:"safi,omitempty"`
}

func (x *DumpRIBRequest) Reset() {
	*x = DumpRIBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpRIBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpRIBRequest) ProtoMessage() {}

func (x *DumpRIBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpRIBRequest.ProtoReflect.Descriptor instead.
func (*DumpRIBRequest) Descriptor() ([]byte, []int) {
	return file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDescGZIP(), []int{3}
}

func (x *DumpRIBRequest) GetPeer() *api.IP {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *DumpRIBRequest) GetAfi() uint32 {
	if x != nil {
		return x.Afi
	}
	return 0
}

func (x *DumpRIBRequest) GetSafi() uint32 {
	if x != nil {
		return x.Safi
	}
	return 0
}

var File_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto protoreflect.FileDescriptor

var file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDesc = []byte{
	0x0a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x6f,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x69, 0x6f, 0x2d, 0x72, 0x64, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x67, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x62, 0x69, 0x6f,
	0x2e, 0x62, 0x67, 0x70, 0x1a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x62, 0x69, 0x6f, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x69, 0x6f,
	0x2d, 0x72, 0x64, 0x2f, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x62, 0x69, 0x6f, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x69,
	0x6f, 0x2d, 0x72, 0x64, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x6f, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x62, 0x69, 0x6f, 0x2d, 0x72, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x58, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74,
	0x2e, 0x49, 0x50, 0x52, 0x0a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x57, 0x0a, 0x0e, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x49, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x49, 0x50, 0x52, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x66, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x61, 0x66, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x66, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x61, 0x66, 0x69, 0x32, 0xd4, 0x01, 0x0a, 0x0a, 0x42, 0x67,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x62,
	0x67, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x62, 0x67, 0x70,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x44, 0x75, 0x6d, 0x70, 0x52,
	0x49, 0x42, 0x49, 0x6e, 0x12, 0x17, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x44,
	0x75, 0x6d, 0x70, 0x52, 0x49, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x62, 0x69, 0x6f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x0a, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x49, 0x42, 0x4f, 0x75,
	0x74, 0x12, 0x17, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x44, 0x75, 0x6d, 0x70,
	0x52, 0x49, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x62, 0x69, 0x6f,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x69, 0x6f, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x69, 0x6f, 0x2d, 0x72,
	0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDescOnce sync.Once
	file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDescData = file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDesc
)

func file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDescGZIP() []byte {
	file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDescOnce.Do(func() {
		file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDescData)
	})
	return file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDescData
}

var file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_goTypes = []interface{}{
	(*ListSessionsRequest)(nil),  // 0: bio.bgp.ListSessionsRequest
	(*SessionFilter)(nil),        // 1: bio.bgp.SessionFilter
	(*ListSessionsResponse)(nil), // 2: bio.bgp.ListSessionsResponse
	(*DumpRIBRequest)(nil),       // 3: bio.bgp.DumpRIBRequest
	(*api.IP)(nil),               // 4: bio.net.IP
	(*Session)(nil),              // 5: bio.bgp.Session
	(*api1.Route)(nil),           // 6: bio.route.Route
}
var file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_depIdxs = []int32{
	1, // 0: bio.bgp.ListSessionsRequest.filter:type_name -> bio.bgp.SessionFilter
	4, // 1: bio.bgp.SessionFilter.neighbor_ip:type_name -> bio.net.IP
	5, // 2: bio.bgp.ListSessionsResponse.sessions:type_name -> bio.bgp.Session
	4, // 3: bio.bgp.DumpRIBRequest.peer:type_name -> bio.net.IP
	0, // 4: bio.bgp.BgpService.ListSessions:input_type -> bio.bgp.ListSessionsRequest
	3, // 5: bio.bgp.BgpService.DumpRIBIn:input_type -> bio.bgp.DumpRIBRequest
	3, // 6: bio.bgp.BgpService.DumpRIBOut:input_type -> bio.bgp.DumpRIBRequest
	2, // 7: bio.bgp.BgpService.ListSessions:output_type -> bio.bgp.ListSessionsResponse
	6, // 8: bio.bgp.BgpService.DumpRIBIn:output_type -> bio.route.Route
	6, // 9: bio.bgp.BgpService.DumpRIBOut:output_type -> bio.route.Route
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_init() }
func file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_init() {
	if File_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto != nil {
		return
	}
	file_github_com_bio_routing_bio_rd_protocols_bgp_api_session_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpRIBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_goTypes,
		DependencyIndexes: file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_depIdxs,
		MessageInfos:      file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_msgTypes,
	}.Build()
	File_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto = out.File
	file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_rawDesc = nil
	file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_goTypes = nil
	file_github_com_bio_routing_bio_rd_protocols_bgp_api_bgp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BgpServiceClient is the client API for BgpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BgpServiceClient interface {
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	DumpRIBIn(ctx context.Context, in *DumpRIBRequest, opts ...grpc.CallOption) (BgpService_DumpRIBInClient, error)
	DumpRIBOut(ctx context.Context, in *DumpRIBRequest, opts ...grpc.CallOption) (BgpService_DumpRIBOutClient, error)
}

type bgpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBgpServiceClient(cc grpc.ClientConnInterface) BgpServiceClient {
	return &bgpServiceClient{cc}
}

func (c *bgpServiceClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, "/bio.bgp.BgpService/ListSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpServiceClient) DumpRIBIn(ctx context.Context, in *DumpRIBRequest, opts ...grpc.CallOption) (BgpService_DumpRIBInClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BgpService_serviceDesc.Streams[0], "/bio.bgp.BgpService/DumpRIBIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &bgpServiceDumpRIBInClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BgpService_DumpRIBInClient interface {
	Recv() (*api1.Route, error)
	grpc.ClientStream
}

type bgpServiceDumpRIBInClient struct {
	grpc.ClientStream
}

func (x *bgpServiceDumpRIBInClient) Recv() (*api1.Route, error) {
	m := new(api1.Route)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bgpServiceClient) DumpRIBOut(ctx context.Context, in *DumpRIBRequest, opts ...grpc.CallOption) (BgpService_DumpRIBOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BgpService_serviceDesc.Streams[1], "/bio.bgp.BgpService/DumpRIBOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &bgpServiceDumpRIBOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BgpService_DumpRIBOutClient interface {
	Recv() (*api1.Route, error)
	grpc.ClientStream
}

type bgpServiceDumpRIBOutClient struct {
	grpc.ClientStream
}

func (x *bgpServiceDumpRIBOutClient) Recv() (*api1.Route, error) {
	m := new(api1.Route)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BgpServiceServer is the server API for BgpService service.
type BgpServiceServer interface {
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	DumpRIBIn(*DumpRIBRequest, BgpService_DumpRIBInServer) error
	DumpRIBOut(*DumpRIBRequest, BgpService_DumpRIBOutServer) error
}

// UnimplementedBgpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBgpServiceServer struct {
}

func (*UnimplementedBgpServiceServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (*UnimplementedBgpServiceServer) DumpRIBIn(*DumpRIBRequest, BgpService_DumpRIBInServer) error {
	return status.Errorf(codes.Unimplemented, "method DumpRIBIn not implemented")
}
func (*UnimplementedBgpServiceServer) DumpRIBOut(*DumpRIBRequest, BgpService_DumpRIBOutServer) error {
	return status.Errorf(codes.Unimplemented, "method DumpRIBOut not implemented")
}

func RegisterBgpServiceServer(s *grpc.Server, srv BgpServiceServer) {
	s.RegisterService(&_BgpService_serviceDesc, srv)
}

func _BgpService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bio.bgp.BgpService/ListSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpServiceServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpService_DumpRIBIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DumpRIBRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BgpServiceServer).DumpRIBIn(m, &bgpServiceDumpRIBInServer{stream})
}

type BgpService_DumpRIBInServer interface {
	Send(*api1.Route) error
	grpc.ServerStream
}

type bgpServiceDumpRIBInServer struct {
	grpc.ServerStream
}

func (x *bgpServiceDumpRIBInServer) Send(m *api1.Route) error {
	return x.ServerStream.SendMsg(m)
}

func _BgpService_DumpRIBOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DumpRIBRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BgpServiceServer).DumpRIBOut(m, &bgpServiceDumpRIBOutServer{stream})
}

type BgpService_DumpRIBOutServer interface {
	Send(*api1.Route) error
	grpc.ServerStream
}

type bgpServiceDumpRIBOutServer struct {
	grpc.ServerStream
}

func (x *bgpServiceDumpRIBOutServer) Send(m *api1.Route) error {
	return x.ServerStream.SendMsg(m)
}

var _BgpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bio.bgp.BgpService",
	HandlerType: (*BgpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSessions",
			Handler:    _BgpService_ListSessions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DumpRIBIn",
			Handler:       _BgpService_DumpRIBIn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DumpRIBOut",
			Handler:       _BgpService_DumpRIBOut_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/bio-routing/bio-rd/protocols/bgp/api/bgp.proto",
}
