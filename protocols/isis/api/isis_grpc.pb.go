// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IsisServiceClient is the client API for IsisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IsisServiceClient interface {
	ListAdjacencies(ctx context.Context, in *ListAdjacenciesRequest, opts ...grpc.CallOption) (*ListAdjacenciesResponse, error)
	GetLSDB(ctx context.Context, in *GetLSDBRequest, opts ...grpc.CallOption) (*GetLSDBResponse, error)
}

type isisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIsisServiceClient(cc grpc.ClientConnInterface) IsisServiceClient {
	return &isisServiceClient{cc}
}

func (c *isisServiceClient) ListAdjacencies(ctx context.Context, in *ListAdjacenciesRequest, opts ...grpc.CallOption) (*ListAdjacenciesResponse, error) {
	out := new(ListAdjacenciesResponse)
	err := c.cc.Invoke(ctx, "/bio.isis.IsisService/ListAdjacencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isisServiceClient) GetLSDB(ctx context.Context, in *GetLSDBRequest, opts ...grpc.CallOption) (*GetLSDBResponse, error) {
	out := new(GetLSDBResponse)
	err := c.cc.Invoke(ctx, "/bio.isis.IsisService/GetLSDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IsisServiceServer is the server API for IsisService service.
// All implementations must embed UnimplementedIsisServiceServer
// for forward compatibility
type IsisServiceServer interface {
	ListAdjacencies(context.Context, *ListAdjacenciesRequest) (*ListAdjacenciesResponse, error)
	GetLSDB(context.Context, *GetLSDBRequest) (*GetLSDBResponse, error)
	mustEmbedUnimplementedIsisServiceServer()
}

// UnimplementedIsisServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIsisServiceServer struct {
}

func (UnimplementedIsisServiceServer) ListAdjacencies(context.Context, *ListAdjacenciesRequest) (*ListAdjacenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdjacencies not implemented")
}
func (UnimplementedIsisServiceServer) GetLSDB(context.Context, *GetLSDBRequest) (*GetLSDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLSDB not implemented")
}
func (UnimplementedIsisServiceServer) mustEmbedUnimplementedIsisServiceServer() {}

// UnsafeIsisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IsisServiceServer will
// result in compilation errors.
type UnsafeIsisServiceServer interface {
	mustEmbedUnimplementedIsisServiceServer()
}

func RegisterIsisServiceServer(s grpc.ServiceRegistrar, srv IsisServiceServer) {
	s.RegisterService(&IsisService_ServiceDesc, srv)
}

func _IsisService_ListAdjacencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdjacenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsisServiceServer).ListAdjacencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bio.isis.IsisService/ListAdjacencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsisServiceServer).ListAdjacencies(ctx, req.(*ListAdjacenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsisService_GetLSDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLSDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsisServiceServer).GetLSDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bio.isis.IsisService/GetLSDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsisServiceServer).GetLSDB(ctx, req.(*GetLSDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IsisService_ServiceDesc is the grpc.ServiceDesc for IsisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IsisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bio.isis.IsisService",
	HandlerType: (*IsisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAdjacencies",
			Handler:    _IsisService_ListAdjacencies_Handler,
		},
		{
			MethodName: "GetLSDB",
			Handler:    _IsisService_GetLSDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocols/isis/api/isis.proto",
}
