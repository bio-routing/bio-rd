// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: protocols/isis/api/isis.proto

package api

import (
	api "github.com/bio-routing/bio-rd/net/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Adjacency_State int32

const (
	Adjacency_Down Adjacency_State = 0
	Adjacency_Init Adjacency_State = 1
	Adjacency_Up   Adjacency_State = 2
)

// Enum value maps for Adjacency_State.
var (
	Adjacency_State_name = map[int32]string{
		0: "Down",
		1: "Init",
		2: "Up",
	}
	Adjacency_State_value = map[string]int32{
		"Down": 0,
		"Init": 1,
		"Up":   2,
	}
)

func (x Adjacency_State) Enum() *Adjacency_State {
	p := new(Adjacency_State)
	*p = x
	return p
}

func (x Adjacency_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Adjacency_State) Descriptor() protoreflect.EnumDescriptor {
	return file_protocols_isis_api_isis_proto_enumTypes[0].Descriptor()
}

func (Adjacency_State) Type() protoreflect.EnumType {
	return &file_protocols_isis_api_isis_proto_enumTypes[0]
}

func (x Adjacency_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Adjacency_State.Descriptor instead.
func (Adjacency_State) EnumDescriptor() ([]byte, []int) {
	return file_protocols_isis_api_isis_proto_rawDescGZIP(), []int{2, 0}
}

type LSPDU_Protocol int32

const (
	LSPDU_IPv4 LSPDU_Protocol = 0
	LSPDU_IPv6 LSPDU_Protocol = 1
)

// Enum value maps for LSPDU_Protocol.
var (
	LSPDU_Protocol_name = map[int32]string{
		0: "IPv4",
		1: "IPv6",
	}
	LSPDU_Protocol_value = map[string]int32{
		"IPv4": 0,
		"IPv6": 1,
	}
)

func (x LSPDU_Protocol) Enum() *LSPDU_Protocol {
	p := new(LSPDU_Protocol)
	*p = x
	return p
}

func (x LSPDU_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LSPDU_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_protocols_isis_api_isis_proto_enumTypes[1].Descriptor()
}

func (LSPDU_Protocol) Type() protoreflect.EnumType {
	return &file_protocols_isis_api_isis_proto_enumTypes[1]
}

func (x LSPDU_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LSPDU_Protocol.Descriptor instead.
func (LSPDU_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_protocols_isis_api_isis_proto_rawDescGZIP(), []int{6, 0}
}

type ListAdjacenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAdjacenciesRequest) Reset() {
	*x = ListAdjacenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_isis_api_isis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdjacenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdjacenciesRequest) ProtoMessage() {}

func (x *ListAdjacenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_isis_api_isis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdjacenciesRequest.ProtoReflect.Descriptor instead.
func (*ListAdjacenciesRequest) Descriptor() ([]byte, []int) {
	return file_protocols_isis_api_isis_proto_rawDescGZIP(), []int{0}
}

type ListAdjacenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adjacencies []*Adjacency `protobuf:"bytes,1,rep,name=adjacencies,proto3" json:"adjacencies,omitempty"`
}

func (x *ListAdjacenciesResponse) Reset() {
	*x = ListAdjacenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_isis_api_isis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAdjacenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAdjacenciesResponse) ProtoMessage() {}

func (x *ListAdjacenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_isis_api_isis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAdjacenciesResponse.ProtoReflect.Descriptor instead.
func (*ListAdjacenciesResponse) Descriptor() ([]byte, []int) {
	return file_protocols_isis_api_isis_proto_rawDescGZIP(), []int{1}
}

func (x *ListAdjacenciesResponse) GetAdjacencies() []*Adjacency {
	if x != nil {
		return x.Adjacencies
	}
	return nil
}

type Adjacency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SystemId           []byte          `protobuf:"bytes,2,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	Address            []byte          `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	InterfaceName      string          `protobuf:"bytes,4,opt,name=interfaceName,proto3" json:"interfaceName,omitempty"`
	Level              uint32          `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	Priority           uint32          `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	IpAddresses        []*api.IP       `protobuf:"bytes,7,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	LastTransitionUnix int64           `protobuf:"varint,8,opt,name=last_transition_unix,json=lastTransitionUnix,proto3" json:"last_transition_unix,omitempty"`
	ExpiresInSeconds   uint32          `protobuf:"varint,9,opt,name=expires_in_seconds,json=expiresInSeconds,proto3" json:"expires_in_seconds,omitempty"`
	Status             Adjacency_State `protobuf:"varint,10,opt,name=status,proto3,enum=bio.isis.Adjacency_State" json:"status,omitempty"`
}

func (x *Adjacency) Reset() {
	*x = Adjacency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_isis_api_isis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Adjacency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Adjacency) ProtoMessage() {}

func (x *Adjacency) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_isis_api_isis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Adjacency.ProtoReflect.Descriptor instead.
func (*Adjacency) Descriptor() ([]byte, []int) {
	return file_protocols_isis_api_isis_proto_rawDescGZIP(), []int{2}
}

func (x *Adjacency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Adjacency) GetSystemId() []byte {
	if x != nil {
		return x.SystemId
	}
	return nil
}

func (x *Adjacency) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Adjacency) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *Adjacency) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Adjacency) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Adjacency) GetIpAddresses() []*api.IP {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *Adjacency) GetLastTransitionUnix() int64 {
	if x != nil {
		return x.LastTransitionUnix
	}
	return 0
}

func (x *Adjacency) GetExpiresInSeconds() uint32 {
	if x != nil {
		return x.ExpiresInSeconds
	}
	return 0
}

func (x *Adjacency) GetStatus() Adjacency_State {
	if x != nil {
		return x.Status
	}
	return Adjacency_Down
}

type GetLSDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level uint32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *GetLSDBRequest) Reset() {
	*x = GetLSDBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_isis_api_isis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLSDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLSDBRequest) ProtoMessage() {}

func (x *GetLSDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_isis_api_isis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLSDBRequest.ProtoReflect.Descriptor instead.
func (*GetLSDBRequest) Descriptor() ([]byte, []int) {
	return file_protocols_isis_api_isis_proto_rawDescGZIP(), []int{3}
}

func (x *GetLSDBRequest) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type GetLSDBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LsdbEntries []*LSDBEntry `protobuf:"bytes,1,rep,name=lsdb_entries,json=lsdbEntries,proto3" json:"lsdb_entries,omitempty"`
}

func (x *GetLSDBResponse) Reset() {
	*x = GetLSDBResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_isis_api_isis_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLSDBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLSDBResponse) ProtoMessage() {}

func (x *GetLSDBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_isis_api_isis_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLSDBResponse.ProtoReflect.Descriptor instead.
func (*GetLSDBResponse) Descriptor() ([]byte, []int) {
	return file_protocols_isis_api_isis_proto_rawDescGZIP(), []int{4}
}

func (x *GetLSDBResponse) GetLsdbEntries() []*LSDBEntry {
	if x != nil {
		return x.LsdbEntries
	}
	return nil
}

type LSDBEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lsp                   *LSPDU   `protobuf:"bytes,1,opt,name=lsp,proto3" json:"lsp,omitempty"`
	InterfacesWithSsnFlag []string `protobuf:"bytes,2,rep,name=interfaces_with_ssn_flag,json=interfacesWithSsnFlag,proto3" json:"interfaces_with_ssn_flag,omitempty"`
	InterfacesWithSrmFlag []string `protobuf:"bytes,3,rep,name=interfaces_with_srm_flag,json=interfacesWithSrmFlag,proto3" json:"interfaces_with_srm_flag,omitempty"`
}

func (x *LSDBEntry) Reset() {
	*x = LSDBEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_isis_api_isis_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSDBEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSDBEntry) ProtoMessage() {}

func (x *LSDBEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_isis_api_isis_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSDBEntry.ProtoReflect.Descriptor instead.
func (*LSDBEntry) Descriptor() ([]byte, []int) {
	return file_protocols_isis_api_isis_proto_rawDescGZIP(), []int{5}
}

func (x *LSDBEntry) GetLsp() *LSPDU {
	if x != nil {
		return x.Lsp
	}
	return nil
}

func (x *LSDBEntry) GetInterfacesWithSsnFlag() []string {
	if x != nil {
		return x.InterfacesWithSsnFlag
	}
	return nil
}

func (x *LSDBEntry) GetInterfacesWithSrmFlag() []string {
	if x != nil {
		return x.InterfacesWithSrmFlag
	}
	return nil
}

type LSPDU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LspId             *LSPID `protobuf:"bytes,1,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	Length            uint32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	RemainingLifetime uint32 `protobuf:"varint,3,opt,name=remaining_lifetime,json=remainingLifetime,proto3" json:"remaining_lifetime,omitempty"`
	SequenceNumber    uint32 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Checksum          uint32 `protobuf:"varint,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
	TypeBlock         uint32 `protobuf:"varint,6,opt,name=type_block,json=typeBlock,proto3" json:"type_block,omitempty"`
	// TLV representations:
	AreaIds                  [][]byte                  `protobuf:"bytes,7,rep,name=area_ids,json=areaIds,proto3" json:"area_ids,omitempty"`
	LspBufferSize            uint32                    `protobuf:"varint,8,opt,name=lsp_buffer_size,json=lspBufferSize,proto3" json:"lsp_buffer_size,omitempty"`
	ProtocolsSupported       []LSPDU_Protocol          `protobuf:"varint,9,rep,packed,name=protocols_supported,json=protocolsSupported,proto3,enum=bio.isis.LSPDU_Protocol" json:"protocols_supported,omitempty"`
	IpInterfacesAddresses    []uint32                  `protobuf:"varint,10,rep,packed,name=ip_interfaces_addresses,json=ipInterfacesAddresses,proto3" json:"ip_interfaces_addresses,omitempty"`
	ExtendedIsReachabilities []*ExtendedISReachability `protobuf:"bytes,11,rep,name=extended_is_reachabilities,json=extendedIsReachabilities,proto3" json:"extended_is_reachabilities,omitempty"`
	ExtendedIpReachabilities []*ExtendedIPReachability `protobuf:"bytes,12,rep,name=extended_ip_reachabilities,json=extendedIpReachabilities,proto3" json:"extended_ip_reachabilities,omitempty"`
	Ipv4TeRouterId           uint32                    `protobuf:"varint,13,opt,name=ipv4_te_router_id,json=ipv4TeRouterId,proto3" json:"ipv4_te_router_id,omitempty"`
	Hostname                 string                    `protobuf:"bytes,14,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *LSPDU) Reset() {
	*x = LSPDU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_isis_api_isis_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSPDU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSPDU) ProtoMessage() {}

func (x *LSPDU) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_isis_api_isis_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSPDU.ProtoReflect.Descriptor instead.
func (*LSPDU) Descriptor() ([]byte, []int) {
	return file_protocols_isis_api_isis_proto_rawDescGZIP(), []int{6}
}

func (x *LSPDU) GetLspId() *LSPID {
	if x != nil {
		return x.LspId
	}
	return nil
}

func (x *LSPDU) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *LSPDU) GetRemainingLifetime() uint32 {
	if x != nil {
		return x.RemainingLifetime
	}
	return 0
}

func (x *LSPDU) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *LSPDU) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *LSPDU) GetTypeBlock() uint32 {
	if x != nil {
		return x.TypeBlock
	}
	return 0
}

func (x *LSPDU) GetAreaIds() [][]byte {
	if x != nil {
		return x.AreaIds
	}
	return nil
}

func (x *LSPDU) GetLspBufferSize() uint32 {
	if x != nil {
		return x.LspBufferSize
	}
	return 0
}

func (x *LSPDU) GetProtocolsSupported() []LSPDU_Protocol {
	if x != nil {
		return x.ProtocolsSupported
	}
	return nil
}

func (x *LSPDU) GetIpInterfacesAddresses() []uint32 {
	if x != nil {
		return x.IpInterfacesAddresses
	}
	return nil
}

func (x *LSPDU) GetExtendedIsReachabilities() []*ExtendedISReachability {
	if x != nil {
		return x.ExtendedIsReachabilities
	}
	return nil
}

func (x *LSPDU) GetExtendedIpReachabilities() []*ExtendedIPReachability {
	if x != nil {
		return x.ExtendedIpReachabilities
	}
	return nil
}

func (x *LSPDU) GetIpv4TeRouterId() uint32 {
	if x != nil {
		return x.Ipv4TeRouterId
	}
	return 0
}

func (x *LSPDU) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type LSPID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId     []byte `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	PseudonodeId uint32 `protobuf:"varint,2,opt,name=pseudonode_id,json=pseudonodeId,proto3" json:"pseudonode_id,omitempty"`
	LspNumber    uint32 `protobuf:"varint,3,opt,name=lsp_number,json=lspNumber,proto3" json:"lsp_number,omitempty"`
}

func (x *LSPID) Reset() {
	*x = LSPID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_isis_api_isis_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSPID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSPID) ProtoMessage() {}

func (x *LSPID) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_isis_api_isis_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSPID.ProtoReflect.Descriptor instead.
func (*LSPID) Descriptor() ([]byte, []int) {
	return file_protocols_isis_api_isis_proto_rawDescGZIP(), []int{7}
}

func (x *LSPID) GetSystemId() []byte {
	if x != nil {
		return x.SystemId
	}
	return nil
}

func (x *LSPID) GetPseudonodeId() uint32 {
	if x != nil {
		return x.PseudonodeId
	}
	return 0
}

func (x *LSPID) GetLspNumber() uint32 {
	if x != nil {
		return x.LspNumber
	}
	return 0
}

type ExtendedIPReachability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric       uint32 `protobuf:"varint,1,opt,name=metric,proto3" json:"metric,omitempty"`
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	IpAddress    uint32 `protobuf:"varint,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"` // To be extended with sub-TLVs
}

func (x *ExtendedIPReachability) Reset() {
	*x = ExtendedIPReachability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_isis_api_isis_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedIPReachability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedIPReachability) ProtoMessage() {}

func (x *ExtendedIPReachability) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_isis_api_isis_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedIPReachability.ProtoReflect.Descriptor instead.
func (*ExtendedIPReachability) Descriptor() ([]byte, []int) {
	return file_protocols_isis_api_isis_proto_rawDescGZIP(), []int{8}
}

func (x *ExtendedIPReachability) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *ExtendedIPReachability) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *ExtendedIPReachability) GetIpAddress() uint32 {
	if x != nil {
		return x.IpAddress
	}
	return 0
}

type IPv4NLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress  uint32 `protobuf:"varint,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Subnetmask uint32 `protobuf:"varint,2,opt,name=subnetmask,proto3" json:"subnetmask,omitempty"`
}

func (x *IPv4NLRI) Reset() {
	*x = IPv4NLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_isis_api_isis_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv4NLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv4NLRI) ProtoMessage() {}

func (x *IPv4NLRI) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_isis_api_isis_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv4NLRI.ProtoReflect.Descriptor instead.
func (*IPv4NLRI) Descriptor() ([]byte, []int) {
	return file_protocols_isis_api_isis_proto_rawDescGZIP(), []int{9}
}

func (x *IPv4NLRI) GetIpAddress() uint32 {
	if x != nil {
		return x.IpAddress
	}
	return 0
}

func (x *IPv4NLRI) GetSubnetmask() uint32 {
	if x != nil {
		return x.Subnetmask
	}
	return 0
}

type ExtendedISReachability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultMetric uint32 `protobuf:"varint,1,opt,name=default_metric,json=defaultMetric,proto3" json:"default_metric,omitempty"`
	NeighborId    []byte `protobuf:"bytes,2,opt,name=neighbor_id,json=neighborId,proto3" json:"neighbor_id,omitempty"` // To be extended with sub-TLVs
}

func (x *ExtendedISReachability) Reset() {
	*x = ExtendedISReachability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_isis_api_isis_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedISReachability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedISReachability) ProtoMessage() {}

func (x *ExtendedISReachability) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_isis_api_isis_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedISReachability.ProtoReflect.Descriptor instead.
func (*ExtendedISReachability) Descriptor() ([]byte, []int) {
	return file_protocols_isis_api_isis_proto_rawDescGZIP(), []int{10}
}

func (x *ExtendedISReachability) GetDefaultMetric() uint32 {
	if x != nil {
		return x.DefaultMetric
	}
	return 0
}

func (x *ExtendedISReachability) GetNeighborId() []byte {
	if x != nil {
		return x.NeighborId
	}
	return nil
}

var File_protocols_isis_api_isis_proto protoreflect.FileDescriptor

var file_protocols_isis_api_isis_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x69, 0x73, 0x69, 0x73,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x62, 0x69, 0x6f, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x1a, 0x11, 0x6e, 0x65, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x69, 0x73, 0x69,
	0x73, 0x2e, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0b, 0x61, 0x64, 0x6a,
	0x61, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x96, 0x03, 0x0a, 0x09, 0x41, 0x64, 0x6a,
	0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x0c, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x49, 0x50, 0x52, 0x0b, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6f, 0x2e,
	0x69, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x23, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x70, 0x10,
	0x02, 0x22, 0x26, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x53, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4c, 0x53, 0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0c,
	0x6c, 0x73, 0x64, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x4c, 0x53,
	0x44, 0x42, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x73, 0x64, 0x62, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x09, 0x4c, 0x53, 0x44, 0x42, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x21, 0x0a, 0x03, 0x6c, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x4c, 0x53, 0x50, 0x44, 0x55,
	0x52, 0x03, 0x6c, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x73, 0x6e, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x73, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x37,
	0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x73, 0x72, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xc7, 0x05, 0x0a, 0x05, 0x4c, 0x53, 0x50, 0x44,
	0x55, 0x12, 0x26, 0x0a, 0x06, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x4c, 0x53, 0x50,
	0x49, 0x44, 0x52, 0x05, 0x6c, 0x73, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x73, 0x70, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x73, 0x70, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e,
	0x4c, 0x53, 0x50, 0x44, 0x55, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x49, 0x53, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x18, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x73, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x49, 0x50, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x18, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x70, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x54, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x1e, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x50, 0x76, 0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x36, 0x10,
	0x01, 0x22, 0x68, 0x0a, 0x05, 0x4c, 0x53, 0x50, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x73, 0x65, 0x75, 0x64,
	0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x73, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6c, 0x73, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x74, 0x0a, 0x16, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x50, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x49, 0x0a, 0x08, 0x49, 0x50, 0x76, 0x34, 0x4e, 0x4c, 0x52, 0x49, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x60, 0x0a, 0x16,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x53, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x64, 0x32, 0xa9,
	0x01, 0x0a, 0x0b, 0x49, 0x73, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x20, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c,
	0x53, 0x44, 0x42, 0x12, 0x18, 0x2e, 0x62, 0x69, 0x6f, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x53, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x62, 0x69, 0x6f, 0x2e, 0x69, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x53, 0x44, 0x42,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x6f, 0x2d, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x69, 0x6f, 0x2d, 0x72, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x69, 0x73, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocols_isis_api_isis_proto_rawDescOnce sync.Once
	file_protocols_isis_api_isis_proto_rawDescData = file_protocols_isis_api_isis_proto_rawDesc
)

func file_protocols_isis_api_isis_proto_rawDescGZIP() []byte {
	file_protocols_isis_api_isis_proto_rawDescOnce.Do(func() {
		file_protocols_isis_api_isis_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocols_isis_api_isis_proto_rawDescData)
	})
	return file_protocols_isis_api_isis_proto_rawDescData
}

var file_protocols_isis_api_isis_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protocols_isis_api_isis_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_protocols_isis_api_isis_proto_goTypes = []interface{}{
	(Adjacency_State)(0),            // 0: bio.isis.Adjacency.State
	(LSPDU_Protocol)(0),             // 1: bio.isis.LSPDU.Protocol
	(*ListAdjacenciesRequest)(nil),  // 2: bio.isis.ListAdjacenciesRequest
	(*ListAdjacenciesResponse)(nil), // 3: bio.isis.ListAdjacenciesResponse
	(*Adjacency)(nil),               // 4: bio.isis.Adjacency
	(*GetLSDBRequest)(nil),          // 5: bio.isis.GetLSDBRequest
	(*GetLSDBResponse)(nil),         // 6: bio.isis.GetLSDBResponse
	(*LSDBEntry)(nil),               // 7: bio.isis.LSDBEntry
	(*LSPDU)(nil),                   // 8: bio.isis.LSPDU
	(*LSPID)(nil),                   // 9: bio.isis.LSPID
	(*ExtendedIPReachability)(nil),  // 10: bio.isis.ExtendedIPReachability
	(*IPv4NLRI)(nil),                // 11: bio.isis.IPv4NLRI
	(*ExtendedISReachability)(nil),  // 12: bio.isis.ExtendedISReachability
	(*api.IP)(nil),                  // 13: bio.net.IP
}
var file_protocols_isis_api_isis_proto_depIdxs = []int32{
	4,  // 0: bio.isis.ListAdjacenciesResponse.adjacencies:type_name -> bio.isis.Adjacency
	13, // 1: bio.isis.Adjacency.ip_addresses:type_name -> bio.net.IP
	0,  // 2: bio.isis.Adjacency.status:type_name -> bio.isis.Adjacency.State
	7,  // 3: bio.isis.GetLSDBResponse.lsdb_entries:type_name -> bio.isis.LSDBEntry
	8,  // 4: bio.isis.LSDBEntry.lsp:type_name -> bio.isis.LSPDU
	9,  // 5: bio.isis.LSPDU.lsp_id:type_name -> bio.isis.LSPID
	1,  // 6: bio.isis.LSPDU.protocols_supported:type_name -> bio.isis.LSPDU.Protocol
	12, // 7: bio.isis.LSPDU.extended_is_reachabilities:type_name -> bio.isis.ExtendedISReachability
	10, // 8: bio.isis.LSPDU.extended_ip_reachabilities:type_name -> bio.isis.ExtendedIPReachability
	2,  // 9: bio.isis.IsisService.ListAdjacencies:input_type -> bio.isis.ListAdjacenciesRequest
	5,  // 10: bio.isis.IsisService.GetLSDB:input_type -> bio.isis.GetLSDBRequest
	3,  // 11: bio.isis.IsisService.ListAdjacencies:output_type -> bio.isis.ListAdjacenciesResponse
	6,  // 12: bio.isis.IsisService.GetLSDB:output_type -> bio.isis.GetLSDBResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_protocols_isis_api_isis_proto_init() }
func file_protocols_isis_api_isis_proto_init() {
	if File_protocols_isis_api_isis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocols_isis_api_isis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdjacenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_isis_api_isis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAdjacenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_isis_api_isis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Adjacency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_isis_api_isis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLSDBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_isis_api_isis_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLSDBResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_isis_api_isis_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSDBEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_isis_api_isis_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSPDU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_isis_api_isis_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LSPID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_isis_api_isis_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedIPReachability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_isis_api_isis_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv4NLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_isis_api_isis_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedISReachability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocols_isis_api_isis_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocols_isis_api_isis_proto_goTypes,
		DependencyIndexes: file_protocols_isis_api_isis_proto_depIdxs,
		EnumInfos:         file_protocols_isis_api_isis_proto_enumTypes,
		MessageInfos:      file_protocols_isis_api_isis_proto_msgTypes,
	}.Build()
	File_protocols_isis_api_isis_proto = out.File
	file_protocols_isis_api_isis_proto_rawDesc = nil
	file_protocols_isis_api_isis_proto_goTypes = nil
	file_protocols_isis_api_isis_proto_depIdxs = nil
}
