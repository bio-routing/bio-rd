// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPServiceClient is the client API for GRPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPServiceClient interface {
	RunSession(ctx context.Context, opts ...grpc.CallOption) (GRPService_RunSessionClient, error)
}

type gRPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPServiceClient(cc grpc.ClientConnInterface) GRPServiceClient {
	return &gRPServiceClient{cc}
}

func (c *gRPServiceClient) RunSession(ctx context.Context, opts ...grpc.CallOption) (GRPService_RunSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPService_ServiceDesc.Streams[0], "/bio.grtp.GRPService/RunSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPServiceRunSessionClient{stream}
	return x, nil
}

type GRPService_RunSessionClient interface {
	Send(*GRPRoute) error
	Recv() (*GRPRoute, error)
	grpc.ClientStream
}

type gRPServiceRunSessionClient struct {
	grpc.ClientStream
}

func (x *gRPServiceRunSessionClient) Send(m *GRPRoute) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPServiceRunSessionClient) Recv() (*GRPRoute, error) {
	m := new(GRPRoute)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPServiceServer is the server API for GRPService service.
// All implementations must embed UnimplementedGRPServiceServer
// for forward compatibility
type GRPServiceServer interface {
	RunSession(GRPService_RunSessionServer) error
	mustEmbedUnimplementedGRPServiceServer()
}

// UnimplementedGRPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGRPServiceServer struct {
}

func (UnimplementedGRPServiceServer) RunSession(GRPService_RunSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method RunSession not implemented")
}
func (UnimplementedGRPServiceServer) mustEmbedUnimplementedGRPServiceServer() {}

// UnsafeGRPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPServiceServer will
// result in compilation errors.
type UnsafeGRPServiceServer interface {
	mustEmbedUnimplementedGRPServiceServer()
}

func RegisterGRPServiceServer(s grpc.ServiceRegistrar, srv GRPServiceServer) {
	s.RegisterService(&GRPService_ServiceDesc, srv)
}

func _GRPService_RunSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPServiceServer).RunSession(&gRPServiceRunSessionServer{stream})
}

type GRPService_RunSessionServer interface {
	Send(*GRPRoute) error
	Recv() (*GRPRoute, error)
	grpc.ServerStream
}

type gRPServiceRunSessionServer struct {
	grpc.ServerStream
}

func (x *gRPServiceRunSessionServer) Send(m *GRPRoute) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPServiceRunSessionServer) Recv() (*GRPRoute, error) {
	m := new(GRPRoute)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPService_ServiceDesc is the grpc.ServiceDesc for GRPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bio.grtp.GRPService",
	HandlerType: (*GRPServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunSession",
			Handler:       _GRPService_RunSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protocols/grp/api/grp.proto",
}
